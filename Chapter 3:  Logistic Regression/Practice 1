import numpy as np
import matplotlib.pyplot as plt
b = 1e-20 

def sigmoid(z):
    return 1 / (1 + np.exp(-z))


def compute_cost(X, y, weights):
    m = len(y)
    h = sigmoid(X @ weights)
    cost = -(1/m) * (y.T @ np.log(h+b) + (1 - y).T @ np.log(1 - h+b))
    return cost

def gradient_descent(X, y, weights, learning_rate, iterations, epsilon):
    m = len(y)
    cost_history = []
    previous_cost = float('inf')  

    for i in range(iterations):
        h = sigmoid(X @ weights)
        gradient = (1/m) * (X.T @ (h - y))
        weights -= learning_rate * gradient
        cost = compute_cost(X, y, weights)
        cost_history.append(cost.flatten())  

      
        if abs(previous_cost - cost) < epsilon:
            print(f"Converged at iteration {i+1}")
            break

        previous_cost = cost
    
    return weights, cost_history


def predict(X, weights):
    return (sigmoid(X @ weights) >= 0.5).astype(int)


grain_size = np.array([0.245, 0.247, 0.285, 0.299, 0.327, 0.347, 0.356, 0.36, 0.363, 0.364,
                       0.398, 0.4, 0.409, 0.421, 0.432, 0.473, 0.509, 0.529, 0.561, 0.569,
                       0.594, 0.638, 0.656, 0.816, 0.853, 0.938, 1.036, 1.045])

spiders = np.array([0, 0, 1, 1, 1, 1, 0, 1, 0, 1,
                    0, 1, 0, 1, 0, 1, 1, 1, 0, 0,
                    1, 1, 1, 1, 1, 1, 1, 1])


m = len(spiders)
X = np.c_[np.ones(m), grain_size] 
y = spiders.reshape(-1, 1)  


weights = np.zeros((X.shape[1], 1))


learning_rate = 1e-3
iterations = 50000
epsilon = 1e-15 


weights, cost_history = gradient_descent(X, y, weights, learning_rate, iterations, epsilon)


cost_history = np.array(cost_history).flatten()

plt.figure(figsize=(8, 6))
plt.plot(range(len(cost_history)), cost_history, color='blue')
plt.xlabel('Epoch')
plt.ylabel('Cost function')
plt.grid(True)
plt.show()


binary_predictions = predict(X, weights)


plt.figure(figsize=(8, 6))
plt.scatter(grain_size, spiders, color='blue', label=' Data')
plt.scatter(grain_size, binary_predictions, color='red', marker='x', label='Predicted data')
plt.xlabel('Grain Size (mm)')
plt.ylabel('Spider Presence')
plt.legend()
plt.grid(True)
plt.show()


accuracy = np.mean(binary_predictions == y.flatten()) * 100
print(f"Training Accuracy: {accuracy:.2f}%")
